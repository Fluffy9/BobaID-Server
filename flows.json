[
    {
        "id": "8fcbe7d9c628da77",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "dc6d38a9a38c76ba",
        "type": "http in",
        "z": "8fcbe7d9c628da77",
        "name": "",
        "url": "/test",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 380,
        "wires": [
            [
                "7df3adbf47b13b21"
            ]
        ]
    },
    {
        "id": "fb1b34d65ba5a53a",
        "type": "http response",
        "z": "8fcbe7d9c628da77",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1370,
        "y": 260,
        "wires": []
    },
    {
        "id": "2a57d9db8fb828d7",
        "type": "http in",
        "z": "8fcbe7d9c628da77",
        "name": "",
        "url": "/redirect/:provider",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 160,
        "wires": [
            [
                "3f922d5ca08cc61e"
            ]
        ]
    },
    {
        "id": "3f922d5ca08cc61e",
        "type": "function",
        "z": "8fcbe7d9c628da77",
        "name": "Redirect",
        "func": "let url = `${env.get(\"APP_URL\")}/${msg.req.params['provider']}?state=${msg.req.query['state']}&code=${msg.req.query['code']}`\nmsg.statusCode = 303;\nmsg.headers = {\n    \"Location\": url\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 160,
        "wires": [
            [
                "46bede7be35b13ad"
            ]
        ]
    },
    {
        "id": "46bede7be35b13ad",
        "type": "http response",
        "z": "8fcbe7d9c628da77",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 450,
        "y": 160,
        "wires": []
    },
    {
        "id": "b662fb4df0cbe984",
        "type": "http request",
        "z": "8fcbe7d9c628da77",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 550,
        "y": 260,
        "wires": [
            [
                "7014fd89a2bc2a0d"
            ]
        ]
    },
    {
        "id": "5fa76f6c6aa9d8e4",
        "type": "function",
        "z": "8fcbe7d9c628da77",
        "name": "AccessCode",
        "func": "// Convert a hex string to a byte array\nconst hexToBytes = function(hex) {\n    for (var bytes = [], c = 0; c < hex.length; c += 2)\n        bytes.push(parseInt(hex.substr(c, 2), 16));\n    return bytes;\n}\n\n// Convert a byte array to a hex string\nconst bytesToHex = function(bytes) {\n    for (var hex = [], i = 0; i < bytes.length; i++) {\n        var current = bytes[i] < 0 ? bytes[i] + 256 : bytes[i];\n        hex.push((current >>> 4).toString(16));\n        hex.push((current & 0xF).toString(16));\n    }\n    return hex.join(\"\");\n}\nlet input = msg.payload.params[0]\ninput = input.substr(2)\nlet n = 64\nlet params = input.split(new RegExp(\"(.{\"+n.toString()+\"})\")).filter(x => x.length == n);\nlet str_length = parseInt(params[0], 16) * 2\ninput = params[1]\nlet bytes_object = hexToBytes(input.slice(0, str_length))\nlet code = String.fromCharCode(...bytes_object)\n\nmsg.url = `https://github.com/login/oauth/access_token?client_id=${env.get(\"GITHUB_CLIENT_ID\")}&client_secret=${env.get(\"GITHUB_CLIENT_SECRET\")}&code=`+code\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 260,
        "wires": [
            [
                "b662fb4df0cbe984"
            ]
        ]
    },
    {
        "id": "902bb87d34bd53c7",
        "type": "function",
        "z": "8fcbe7d9c628da77",
        "name": "AccessToken",
        "func": "let first = msg.payload.indexOf(\"access_token=\") + 13\nlet last = msg.payload.substring(first, msg.payload.length).indexOf(\"&\")+13\n\nlet access_token = msg.payload.substring(first, last)\n//msg.payload = JSON.stringify({ access_token: payload['access_token'] })\nmsg.headers = {\"Authorization\": `token ${access_token}`}\n//msg.payload = JSON.stringify({access_token: access_token})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 260,
        "wires": [
            [
                "f1af12ae3e7dc6fc"
            ]
        ]
    },
    {
        "id": "f1af12ae3e7dc6fc",
        "type": "http request",
        "z": "8fcbe7d9c628da77",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.github.com/user",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 990,
        "y": 260,
        "wires": [
            [
                "0100ddc126614d0a"
            ]
        ]
    },
    {
        "id": "43457c351d545bbf",
        "type": "function",
        "z": "8fcbe7d9c628da77",
        "name": "User",
        "func": "const ethers = context.global.get('ethers');\nvar abiCoder = ethers.utils.defaultAbiCoder;\nlet payload = JSON.parse(msg.payload);\nlet result = abiCoder.encode([\"uint256\"], [payload[\"id\"]])\nresult = abiCoder.encode([\"uint256\"],[32]) + result.substring(2, result.length)\n\nmsg.headers = {}\nmsg.headers[\"Access-Control-Allow-Origin\"]= \"*\";\nmsg.headers[\"Access-Control-Allow-Methods\"]= \"POST, GET, OPTIONS\";\nmsg.payload = JSON.stringify({\"result\": result})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 260,
        "wires": [
            [
                "fb1b34d65ba5a53a"
            ]
        ]
    },
    {
        "id": "7014fd89a2bc2a0d",
        "type": "switch",
        "z": "8fcbe7d9c628da77",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "error",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 690,
        "y": 260,
        "wires": [
            [
                "a24b8d6114576ead"
            ],
            [
                "902bb87d34bd53c7"
            ]
        ]
    },
    {
        "id": "a24b8d6114576ead",
        "type": "http response",
        "z": "8fcbe7d9c628da77",
        "name": "Error",
        "statusCode": "500",
        "headers": {},
        "x": 830,
        "y": 220,
        "wires": []
    },
    {
        "id": "0100ddc126614d0a",
        "type": "switch",
        "z": "8fcbe7d9c628da77",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "error",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1130,
        "y": 260,
        "wires": [
            [
                "335bd9bd671e8cae"
            ],
            [
                "43457c351d545bbf"
            ]
        ]
    },
    {
        "id": "335bd9bd671e8cae",
        "type": "http response",
        "z": "8fcbe7d9c628da77",
        "name": "Error",
        "statusCode": "500",
        "headers": {},
        "x": 1270,
        "y": 220,
        "wires": []
    },
    {
        "id": "77c3c266d3f7db7e",
        "type": "switch",
        "z": "8fcbe7d9c628da77",
        "name": "",
        "property": "payload[\"method\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "${TURING_HELPER_CONTRACT}",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 250,
        "y": 260,
        "wires": [
            [
                "5fa76f6c6aa9d8e4"
            ],
            [
                "ae722dea510b18c7"
            ]
        ]
    },
    {
        "id": "ae722dea510b18c7",
        "type": "http response",
        "z": "8fcbe7d9c628da77",
        "name": "Error",
        "statusCode": "500",
        "headers": {},
        "x": 390,
        "y": 300,
        "wires": []
    },
    {
        "id": "7df3adbf47b13b21",
        "type": "function",
        "z": "8fcbe7d9c628da77",
        "name": "",
        "func": "msg.payload = JSON.stringify({result: \"0x00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000418b950000000000000000000000000000000000000000000000000000017e60d3b45f\"})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 380,
        "wires": [
            [
                "0bd2d859a6a1b489"
            ]
        ]
    },
    {
        "id": "0bd2d859a6a1b489",
        "type": "http response",
        "z": "8fcbe7d9c628da77",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 400,
        "y": 380,
        "wires": []
    },
    {
        "id": "5f366becf48ef9a3",
        "type": "http in",
        "z": "8fcbe7d9c628da77",
        "name": "",
        "url": "/github",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 260,
        "wires": [
            [
                "77c3c266d3f7db7e"
            ]
        ]
    }
]